const float4 State : register(c217);
const float4x4 Transform : register(c218);

float Time() { return State[0]; }
float ScreenWidth() { return State[1]; }
float ScreenHeight() { return State[2]; }

float2 ScreenToDeviceCoords(float2 screen_coord)
{
	screen_coord *= 2.0 / float2(ScreenWidth(), -ScreenHeight());
	screen_coord += float2(-1.0, 1.0);
	return screen_coord;
}

struct VS_OUTPUT
{
	float4 Position		:	POSITION0;
	float4 Color		:	COLOR0;
	float2 TexCoord		:	TEXCOORD0;
	float4 Data0		:	TEXCOORD1;
	float4 Data1		:	TEXCOORD2;
	float4 Data2		:	TEXCOORD3;
	float4 Data3		:	TEXCOORD4;
	float4 Data4		:	TEXCOORD5;
	float4 Data5		:	TEXCOORD6;
	float4 Data6		:	TEXCOORD7;
	float4 Coord		:	COLOR1;
};

struct VS_INPUT
{
	float2 Position		:	POSITION;
	float4   Color		:	COLOR0;
	float2 TexCoord		:	TEXCOORD0;
	float2 ObjCoord		:	TEXCOORD1;
	float4 Data0		:	TEXCOORD2;
	float4 Data1		:	TEXCOORD3;
	float4 Data2		:	TEXCOORD4;
	float4 Data3		:	TEXCOORD5;
	float4 Data4		:	TEXCOORD6;
	float4 Data5		:	TEXCOORD7;
	float4 Data6		:	COLOR1;
};

VS_OUTPUT main(const VS_INPUT input)
{
	VS_OUTPUT output;
	output.Coord.xy = input.ObjCoord.xy;
	output.Coord.zw = mul(Transform, float4(input.Position, 1.0, 1.0)).xy;
	output.Position = float4(ScreenToDeviceCoords(output.Coord.zw), 1.0, 1.0);
	output.Color = input.Color;
	output.TexCoord = input.TexCoord;
	output.Data0 = input.Data0;
	output.Data1 = input.Data1;
	output.Data2 = input.Data2;
	output.Data3 = input.Data3;
	output.Data4 = input.Data4;
	output.Data5 = input.Data5;
	output.Data6 = input.Data6;
	return output;
}